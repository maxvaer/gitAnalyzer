// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ICommandHelper is an autogenerated mock type for the ICommandHelper type
type ICommandHelper struct {
	mock.Mock
}

type ICommandHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *ICommandHelper) EXPECT() *ICommandHelper_Expecter {
	return &ICommandHelper_Expecter{mock: &_m.Mock}
}

// CheckRequiredNPMPackage provides a mock function with given fields: packageName
func (_m *ICommandHelper) CheckRequiredNPMPackage(packageName string) bool {
	ret := _m.Called(packageName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(packageName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ICommandHelper_CheckRequiredNPMPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRequiredNPMPackage'
type ICommandHelper_CheckRequiredNPMPackage_Call struct {
	*mock.Call
}

// CheckRequiredNPMPackage is a helper method to define mock.On call
//   - packageName string
func (_e *ICommandHelper_Expecter) CheckRequiredNPMPackage(packageName interface{}) *ICommandHelper_CheckRequiredNPMPackage_Call {
	return &ICommandHelper_CheckRequiredNPMPackage_Call{Call: _e.mock.On("CheckRequiredNPMPackage", packageName)}
}

func (_c *ICommandHelper_CheckRequiredNPMPackage_Call) Run(run func(packageName string)) *ICommandHelper_CheckRequiredNPMPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICommandHelper_CheckRequiredNPMPackage_Call) Return(_a0 bool) *ICommandHelper_CheckRequiredNPMPackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ICommandHelper_CheckRequiredNPMPackage_Call) RunAndReturn(run func(string) bool) *ICommandHelper_CheckRequiredNPMPackage_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRequiredPipPackage provides a mock function with given fields: packageName
func (_m *ICommandHelper) CheckRequiredPipPackage(packageName string) bool {
	ret := _m.Called(packageName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(packageName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ICommandHelper_CheckRequiredPipPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRequiredPipPackage'
type ICommandHelper_CheckRequiredPipPackage_Call struct {
	*mock.Call
}

// CheckRequiredPipPackage is a helper method to define mock.On call
//   - packageName string
func (_e *ICommandHelper_Expecter) CheckRequiredPipPackage(packageName interface{}) *ICommandHelper_CheckRequiredPipPackage_Call {
	return &ICommandHelper_CheckRequiredPipPackage_Call{Call: _e.mock.On("CheckRequiredPipPackage", packageName)}
}

func (_c *ICommandHelper_CheckRequiredPipPackage_Call) Run(run func(packageName string)) *ICommandHelper_CheckRequiredPipPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICommandHelper_CheckRequiredPipPackage_Call) Return(_a0 bool) *ICommandHelper_CheckRequiredPipPackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ICommandHelper_CheckRequiredPipPackage_Call) RunAndReturn(run func(string) bool) *ICommandHelper_CheckRequiredPipPackage_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRequiredTools provides a mock function with given fields: tool
func (_m *ICommandHelper) CheckRequiredTools(tool string) bool {
	ret := _m.Called(tool)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tool)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ICommandHelper_CheckRequiredTools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRequiredTools'
type ICommandHelper_CheckRequiredTools_Call struct {
	*mock.Call
}

// CheckRequiredTools is a helper method to define mock.On call
//   - tool string
func (_e *ICommandHelper_Expecter) CheckRequiredTools(tool interface{}) *ICommandHelper_CheckRequiredTools_Call {
	return &ICommandHelper_CheckRequiredTools_Call{Call: _e.mock.On("CheckRequiredTools", tool)}
}

func (_c *ICommandHelper_CheckRequiredTools_Call) Run(run func(tool string)) *ICommandHelper_CheckRequiredTools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICommandHelper_CheckRequiredTools_Call) Return(_a0 bool) *ICommandHelper_CheckRequiredTools_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ICommandHelper_CheckRequiredTools_Call) RunAndReturn(run func(string) bool) *ICommandHelper_CheckRequiredTools_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommand provides a mock function with given fields: command, path, language
func (_m *ICommandHelper) RunCommand(command string, path string, language string) string {
	ret := _m.Called(command, path, language)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(command, path, language)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ICommandHelper_RunCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommand'
type ICommandHelper_RunCommand_Call struct {
	*mock.Call
}

// RunCommand is a helper method to define mock.On call
//   - command string
//   - path string
//   - language string
func (_e *ICommandHelper_Expecter) RunCommand(command interface{}, path interface{}, language interface{}) *ICommandHelper_RunCommand_Call {
	return &ICommandHelper_RunCommand_Call{Call: _e.mock.On("RunCommand", command, path, language)}
}

func (_c *ICommandHelper_RunCommand_Call) Run(run func(command string, path string, language string)) *ICommandHelper_RunCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ICommandHelper_RunCommand_Call) Return(_a0 string) *ICommandHelper_RunCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ICommandHelper_RunCommand_Call) RunAndReturn(run func(string, string, string) string) *ICommandHelper_RunCommand_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewICommandHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewICommandHelper creates a new instance of ICommandHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICommandHelper(t mockConstructorTestingTNewICommandHelper) *ICommandHelper {
	mock := &ICommandHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
