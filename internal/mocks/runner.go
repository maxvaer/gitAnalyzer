// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// runner is an autogenerated mock type for the runner type
type runner struct {
	mock.Mock
}

type runner_Expecter struct {
	mock *mock.Mock
}

func (_m *runner) EXPECT() *runner_Expecter {
	return &runner_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: command, path
func (_m *runner) Execute(command string, path string) string {
	ret := _m.Called(command, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(command, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// runner_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type runner_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - command string
//   - path string
func (_e *runner_Expecter) Execute(command interface{}, path interface{}) *runner_Execute_Call {
	return &runner_Execute_Call{Call: _e.mock.On("Execute", command, path)}
}

func (_c *runner_Execute_Call) Run(run func(command string, path string)) *runner_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *runner_Execute_Call) Return(_a0 string) *runner_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *runner_Execute_Call) RunAndReturn(run func(string, string) string) *runner_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewRunner interface {
	mock.TestingT
	Cleanup(func())
}

// newRunner creates a new instance of runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRunner(t mockConstructorTestingTnewRunner) *runner {
	mock := &runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
